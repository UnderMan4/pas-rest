<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition xmlns:ui="http://java.sun.com/jsf/facelets" 
                xmlns="http://www.w3.org/1999/xhtml"
                template="./templates/MainTemplate.xhtml"
                xmlns:h="http://java.sun.com/jsf/html">

    <ui:define name="top">
        <p>${msg["main.page"]}/${msg["menu.templates"]}</p>
    </ui:define>

    <ui:define name="left">
        <ui:include src="./templates/menu.xhtml" />
    </ui:define>

    <ui:define name="content">
        <p>Aplikacja posiada dwa arkusze stylów wczytywane przez szablon <i>templates/MainTemplate.xhtml</i>. Oba umieszczone są w katalogu <i>src/main/webapp/resources/css</i>, natomiast w archiwum WAR znajdują się w katalogu <i>resources/css</i>.
        Stąd ścieżka używana w odwołaniu z poziomu szablonu to: <code>href="./../resources/css/plik_arkusza.css"</code></p>
        <p>Arkusz <i>cssLayout.css</i> definiuje właściwości bloków, z których składa się szablon aplikacji.</p>
        <p>Arkusz <i>default.css</i> definiuje domyślny zestaw stylów (częściowo przesłonietych przez style poszczególnych bloków).</p>
        <p>Stosowanie stylów w szablonach JSF nie odbiega od stosowania ich bezpośrednio w HTML. Definiując style o nazwach odpowiadających nazwom elementów HTML
            można łatwo sformatować te elementy. Ponadto można definiować dowolne style i stosować do elementów atrybut <code>class</code> jak w poniższym przykładzie:</p>
        <p><h:outputText class="red_alert" value='Tekst sformatowany za pomocą stylu red-alert (class="red-alert") zdefiniowanym w arkuszu default.css.' /></p>

    </ui:define>

</ui:composition>
