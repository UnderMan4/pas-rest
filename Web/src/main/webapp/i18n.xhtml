<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition xmlns:ui="http://java.sun.com/jsf/facelets" 
                xmlns="http://www.w3.org/1999/xhtml"
                template="./templates/MainTemplate.xhtml">

    <ui:define name="top">
        <p>${msg["main.page"]}/${msg["menu.i18n"]}</p>
    </ui:define>

    <ui:define name="left">
        <ui:include src="./templates/menu.xhtml" />
    </ui:define>

    <ui:define name="content">
        <p>Aplikacja zawiera przykłady zastosowania plików zasobów w celu uzyskania wersji językowych aplikacji.</p>
        <p>Ustawienia językowe wprowadzone są w pliku konfiguracyjnym <i>faces-config.xml</i>. Element <code>locale-config</code> określa sposób obsługiwania preferencji języka strony zgłaszanych przez przeglądarkę: elementy <code>supported-locale</code> formują listę obsługiwanych lokalizacji, zaś element <code>default-locale</code> określa lokalizację domyślną stosowaną wtedy, gdy nie można wybrać lokalizacji na podstawie preferencji przeglądarki.</p>
        <p>Podstawowe zasoby lokalizacji definiuje się poprzez użycie elementu <code>resource-bundle</code>.<br />
            Element <code>base-name</code> jest nazwą kwalifikowaną, która przekłada się na położenie pliku zasobów. Położenie to jest liczone względem katalogu klas, a więc<i>WEB-INF/classes</i> w archiwum WAR; aby zapewnić właściwą lokalizację, pliki zasobów muszą znajdować się w katalogu <i>src/main/resources</i> projektu.<br />
            Pliki zasobów są wyszukiwane według standardowego algorytmu (od najbardziej dokładnej specyfikacji lokalizacji do pliku domyślnego), a zatem przy lokalizacji polskiej nastąpi próba otwarcia pliku <i>[base-name]_pl_PL.properties</i>, w przypadku niepowodzenia - <i>[base-name]_pl.properties</i>, i w przypadku ponownego niepowodzenia - <i>[base-name].properties</i>.<br />
            Element <code>var</code> jest nazwą, która pozwala odwoływać się do zasobów z poziomu dokumentu XHTML, poprzez użycie wyrażenia <code>[nazwa_var].[klucz_zasobu]</code>. Przykłady użycia można odnaleźć w stopce (<i>templates/MainTemplate.xhtml</i>), menu (<i>templates/menu.xhtml</i>) oraz nagłówku każdej strony.
        </p>
        <p>Do tak określonych zasobów można także uzyskać dostęp z poziomu metod ziaren aplikacji. Wykorzystywana jest w tym celu klasa <code>ResourceBundle</code> identycznie jak w środowisku Java SE. Przykładem takiego wykorzystania zasobów jest metoda <code>SimpleValidationBean.checkPasswordMatching()</code>.</p>
        <p>Standardowe mechanizmy JavaServerFaces, takie jak konwertery czy walidatory, korzystają z domyślnych zasobów zdefiniowanych w plikach mieszczących się w bibliotece <i>jsf-api</i>. Aby zmienić te komunikaty, należy przesłonić je (zdefiniować na nowo) we własnym pliku zasobów (w przykładowej aplikacji jest to plik <i>jsf_messages</i>). Plik taki nalezy wskazać w konfiguracji (<i>faces-config.xml</i>) używając elementu <code>message-bundle</code>. Przykłady wykorzystania znajdują się na stronach poświęconych walidacji danych formularza.</p>
    </ui:define>

</ui:composition>
